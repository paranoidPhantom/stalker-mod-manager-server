require('dotenv').config()
const fs = require("fs")
const colors = require("colors")
const { Telegraf, Telegram, Format, Input, Markup } = require('telegraf');
const { Keyboard } = require('telegram-keyboard')
const bot = new Telegraf(process.env.BOT_TOKEN);
const JSON_DB = require('simple-json-db');
const CONFIG = require("./config.json")
const sessionsDB = new JSON_DB('db/sessionsDB.json');
var registeredCommands = []
var dynamicQueryListeners = []

const regCmd = (command, description, callbackfn, disableRegistration) => {
    try {
        if (command == "/start") {
            bot.start(callbackfn);
        } else if (command == "/help") {
            bot.help(callbackfn)
        } else if (command.startsWith("/")) {
            bot.command(command.replace("/",""), callbackfn)
        } else {
            bot.hears(command,callbackfn)
        }
        if (disableRegistration !== true && command.startsWith("/")) {
            registeredCommands[registeredCommands.length] = {command: command.replace("/",""), description: description}
        }
    } catch(err) {
        console.log(("Error registering '"+command+"' |",err).red)
    }
}

const regAction = (action_id, callbackfn) => {
    try {
        bot.action(action_id,callbackfn)
    } catch(err) {
        console.log(("Error registering action '"+action_id+"' |",err).red)
    }
}

//________Command registration__________
const Buttons = Markup.inlineKeyboard
const BTN = Markup.button.callback

const funnyPhrases = [
    "–ê –Ω—É—É—É, –ø–æ–¥–æ—Ä–≤–∞–ª–∏ –ø–∞—Ü–∞–Ω—ã!",
    "–ë—Ä–∞—Ç–∏—à–∫–∞, –∞ —Ç—ã –Ω—É–¥–Ω—ã–π. –í –º–æ—Ä–¥—É –¥–∞–≤–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–ª?",
    "–•–µ—Ä–∞—á—å –∏—Ö, –ø–∞—Ü–∞–Ω—ã!",
    "–ö—Ä–∞–Ω—Ç—ã –≤–∞–º –≤—Å–µ–º!",
    "–ó–∞–∫–æ–ø–∞–µ–º –≤–∞—Å, —Å—É—á—å–µ!",
    "–ê–∞–∞, —â–∞ –º—ã –≤–∞–º, –∞—Ä–∞–±—ã –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–µ!",
    "–ó–∞—Ö–æ–¥–∏, —Å –±–æ–∫—É –∑–∞—Ö–æ–¥–∏!",
    "–ë–µ—Ä–µ–º –µ–≥–æ —Ç–µ–ø–ª–µ–Ω—å–∫–æ–≥–æ!",
    "–ù–µ –º–∞–Ω–¥—Ä–∞–∂—É–π, –ø–∞—Ü–∞–Ω—ã, –æ–±—Ö–æ–¥–∏–º!",
    "–ë—ã—Ä–æ, –æ–±—Ö–æ–¥–∏, –æ–±—Ö–æ–¥–∏ —ç—Ç—É —à–µ–ª—É–ø–æ–Ω—å!",
    "–ê –Ω—É, —á–∏–∫–∏-–±—Ä–∏–∫–∏ –∏ –≤ –¥–∞–º–∫–∏!",
    "–°—Ä–∏—Å–æ–≤–∞–ª–∏ –Ω–∞—Å! –®—É—Ö–µ—Ä!",
    "–î–æ—Å—Ç–∞–ª–æ –º–ª—è –≤ –Ω–∞—Ç—É—Ä–µ —É–∂–µ –≤—Å—ë, –ø–æ–Ω—Ç—ã —ç—Ç–∏ –µ—â–µ —Ñ—Ä–∞–µ—Ä—Å–∫–∏–µ...",
    "–î–∞ –º–∞–Ω–∞–ª —è —ç—Ç—É –∑–æ–Ω—É, —è –≤ –≥–æ—Ä–æ–¥ —Ö–æ—á—É.",
    "–ù–µ—Ç—É, –º–ª—è, –∂–∏–∑–Ω–∏, –≤ –Ω–∞—Ç—É—Ä–µ, –Ω–∏–≥–¥–µ –Ω–µ—Ç—É...",
    "–≠—Ö—Ö... –ë–∞–±—É –±—ã... –ü—Ä–∏–≥–æ–ª—É–±–∏–ª –±—ã –ª—é–±—É—é...",
    "–ì–æ–ø-—Å—Ç–æ–ø, –º—ã –ø–æ–¥–æ—à–ª–∏ –∏–∑-–∑–∞ —É–≥–ª–∞..."
]

const generateCode = async (ctx) => {
    const user = ctx.from
    let code = ""
    while (sessionsDB.has("_login_code_"+code) || code == "") {
        code = ""
        const length = 6
        const characters = '0123456789';
        const charactersLength = characters.length;
        let counter = 0;
        while (counter < length) {
          code += characters.charAt(Math.floor(Math.random() * charactersLength));
          counter += 1;
        }
    }
    const db =  sessionsDB.JSON()
    const keys = Object.keys(db)
    keys.forEach((key) => {
        const checkingUser = db[key]
        if (checkingUser.id === user.id) {
            sessionsDB.delete(key)
        }
    })
    sessionsDB.set("_login_code_"+code, user)
    //
    await ctx.replyWithDice()
    await ctx.replyWithMarkdown("***'"+funnyPhrases[Math.floor(Math.random() * funnyPhrases.length)]+"'***")
    setTimeout(async () => {
        await ctx.replyWithMarkdown("```"+code+"```")
    }, 1000);
}

// Start command

regCmd("/start","ü§ù –ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", async (ctx) => {
    try {
        await ctx.replyWithHTML("<b>–ü—Ä–∏–≤–µ—Ç!</b>\n<i>–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /login –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥!</i>",Buttons(
            [
                [BTN("üöÄ","get_code")]
            ]
        ))
    } catch(err) {
        await ctx.replyWithMarkdown("**–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–º–∞–Ω–¥—ã:** \n`\n"+err+"\n`")
        console.log(("Error running '/start' |",err))
    }
})

regCmd("/login", "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç", generateCode)

regCmd("/setperms", "admin only", (ctx) => {
    const usersDB = new JSON_DB('db/usersDB.json');
    const text = ctx.message.text
    const args = text.split(" ")
    const UID = ctx.user.id
    const subjectUID = args[1]
    const accessLevel = args[2]
    if (!accessLevel || (accessLevel < 0 || accessLevel > 3)) { ctx.reply("–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 3"); return }
    const user_data = usersDB.get(UID)
    const subject_data = usersDB.get(subjectUID)
    try {
        if (user_data.accessLevel <= subject_data.accessLevel) { ctx.reply("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤"); return }
        
    } catch (error) {
        ctx.reply(`Error: ${error}`)
    }
}, true)

regAction("get_code", generateCode)

//______________________________________
try {
    bot.on("callback_query",(ctx) => {
        const data = ctx.callbackQuery.data
        dynamicQueryListeners.forEach(listener => {
            if (data.startsWith(listener.prefix)) {
                const input = data.replace(listener.prefix,"").split("_")
                listener.callbackfn.call(this,ctx,input)
            }
        })
    })
    bot.telegram.setMyCommands(registeredCommands)
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
    bot.launch();
    console.log("\nBot listening!".rainbow)
} catch(err) {
    console.log("ERROR STARTING BOT:".red,err.bgRed)
}